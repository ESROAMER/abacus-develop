driver_run.cpp:    p_esolver->before_all_runners(PARAM.inp, GlobalC::ucell);
driver_run.cpp:        p_esolver->others(istep);
driver_run.cpp:    p_esolver->after_all_runners();
module_esolver/esolver.cpp:        p_esolver->before_all_runners(inp, ucell);
module_esolver/esolver.cpp:        p_esolver->runner(0, ucell); // scf-only
module_md/md_func.cpp:    p_esolver->runner(istep, unit_in);
module_md/md_func.cpp:    potential = p_esolver->cal_energy();
module_md/md_func.cpp:    p_esolver->cal_force(force_temp);
module_md/md_func.cpp:        p_esolver->cal_stress(virial);
module_md/test/fire_test.cpp:        p_esolver->before_all_runners(param_in.inp, ucell);
module_md/test/langevin_test.cpp:        p_esolver->before_all_runners(param_in.inp, ucell);
module_md/test/lj_pot_test.cpp:    p_esolver->before_all_runners(input, ucell);
module_md/test/lj_pot_test.cpp:    p_esolver->before_all_runners(input, ucell);
module_md/test/lj_pot_test.cpp:    p_esolver->before_all_runners(input, ucell);
module_md/test/lj_pot_test.cpp:    p_esolver->ucell_ = &ucell;
module_md/test/lj_pot_test.cpp:    p_esolver->rcut_search_radius(rcut);
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_rcut(i, j), 3.0 * ModuleBase::ANGSTROM_AU, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->search_radius, 3.0 * ModuleBase::ANGSTROM_AU + 0.01, doublethreshold);
module_md/test/lj_pot_test.cpp:    p_esolver->rcut_search_radius(rcut);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->lj_rcut(0, 0), 3.0 * ModuleBase::ANGSTROM_AU, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->lj_rcut(0, 1), 4.0 * ModuleBase::ANGSTROM_AU, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->lj_rcut(1, 0), 4.0 * ModuleBase::ANGSTROM_AU, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->lj_rcut(1, 1), 5.0 * ModuleBase::ANGSTROM_AU, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->search_radius, 5.0 * ModuleBase::ANGSTROM_AU + 0.01, doublethreshold);
module_md/test/lj_pot_test.cpp:    p_esolver->ucell_ = &ucell;
module_md/test/lj_pot_test.cpp:    p_esolver->set_c6_c12(rule, lj_epsilon, lj_sigma);
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_c6(i, j), 4.0 * lj_epsilon[k] * temp / ModuleBase::Ry_to_eV, doublethreshold);
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_c12(i, j), p_esolver->lj_c6(i, j) * temp, doublethreshold);
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->lj_c6(i, j), p_esolver->lj_c6(j, i));
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->lj_c12(i, j), p_esolver->lj_c12(j, i));
module_md/test/lj_pot_test.cpp:    p_esolver->set_c6_c12(rule, lj_epsilon, lj_sigma);
module_md/test/lj_pot_test.cpp:        EXPECT_NEAR(p_esolver->lj_c6(i, i), 4.0 * lj_epsilon[i] * temp / ModuleBase::Ry_to_eV, doublethreshold);
module_md/test/lj_pot_test.cpp:        EXPECT_NEAR(p_esolver->lj_c12(i, i), p_esolver->lj_c6(i, i) * temp, doublethreshold);
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_c6(i, j),
module_md/test/lj_pot_test.cpp:                        std::sqrt(p_esolver->lj_c6(i, i) * p_esolver->lj_c6(j, j)),
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_c12(i, j),
module_md/test/lj_pot_test.cpp:                        std::sqrt(p_esolver->lj_c12(i, i) * p_esolver->lj_c12(j, j)),
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->lj_c6(i, j), p_esolver->lj_c6(j, i));
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->lj_c12(i, j), p_esolver->lj_c12(j, i));
module_md/test/lj_pot_test.cpp:    p_esolver->set_c6_c12(rule, lj_epsilon, lj_sigma);
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_c6(i, j),
module_md/test/lj_pot_test.cpp:            EXPECT_NEAR(p_esolver->lj_c12(i, j), p_esolver->lj_c6(i, j) * temp, doublethreshold);
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->lj_c6(i, j), p_esolver->lj_c6(j, i));
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->lj_c12(i, j), p_esolver->lj_c12(j, i));
module_md/test/lj_pot_test.cpp:    p_esolver->ucell_ = &ucell;
module_md/test/lj_pot_test.cpp:    p_esolver->rcut_search_radius(rcut);
module_md/test/lj_pot_test.cpp:    p_esolver->set_c6_c12(rule, lj_epsilon, lj_sigma);
module_md/test/lj_pot_test.cpp:    p_esolver->cal_en_shift(false);
module_md/test/lj_pot_test.cpp:            EXPECT_DOUBLE_EQ(p_esolver->en_shift(i, j), 0.0);
module_md/test/lj_pot_test.cpp:    p_esolver->cal_en_shift(true);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->en_shift(0, 0), -2.5810212013100967e-09, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->en_shift(0, 1), -3.303688865319793e-07, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->en_shift(1, 0), -3.303688865319793e-07, doublethreshold);
module_md/test/lj_pot_test.cpp:    EXPECT_NEAR(p_esolver->en_shift(1, 1), -5.6443326024140752e-06, doublethreshold);
module_md/test/msst_test.cpp:        p_esolver->before_all_runners(param_in.inp, ucell);
module_md/test/nhchain_test.cpp:        p_esolver->before_all_runners(param_in.inp, ucell);
module_md/test/verlet_test.cpp:        p_esolver->before_all_runners(param_in.inp, ucell);
module_relax/relax_driver.cpp:        p_esolver->runner(istep - 1, GlobalC::ucell);
module_relax/relax_driver.cpp:            this->etot = p_esolver->cal_energy();
module_relax/relax_driver.cpp:                p_esolver->cal_force(force);
module_relax/relax_driver.cpp:                p_esolver->cal_stress(stress);
module_relax/relax_driver.cpp:                if (p_esolver && stop && p_esolver->get_maxniter() == p_esolver->get_niter()
module_relax/relax_driver.cpp:                    && !(p_esolver->get_conv_elec()))
module_relax/relax_driver.cpp:            Json::add_output_energy(p_esolver->cal_energy() * ModuleBase::Ry_to_eV);
module_ri/Exx_LRI_interface.hpp:                // GlobalC::exx_lcao.cal_exx_elec(p_esolver->LOC, p_esolver->LOWF.wfc_k_grid);
